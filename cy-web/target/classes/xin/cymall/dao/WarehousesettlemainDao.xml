<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xin.cymall.dao.WarehousesettlemainDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="xin.cymall.entity.Warehousesettlemain" id="warehousesettlemainMap">
        <result property="housesetmainId" column="houseSetMain_id"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="totalMoney" column="total_money"/>
        <result property="paidMoney" column="paid_money"/>
        <result property="unpidMoney" column="unpid_money"/>
        <result property="settleDate" column="settle_date"/>
        <result property="remark" column="remark"/>
    </resultMap>

	<select id="get" resultType="xin.cymall.entity.Warehousesettlemain">
		select * from t_warehousesettlemain where houseSetMain_id = #{value}
	</select>

	<select id="getList" resultType="xin.cymall.entity.Warehousesettlemain">
		select * from t_warehousesettlemain t <include refid="where_clause" />
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by houseSetMain_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="getCount" resultType="int">
		select count(*) from t_warehousesettlemain t  <include refid="where_clause" />
	</select>

    <!-- 搜索数据区域 -->
    <sql id="where_clause">
        <where>
            1=1
            <if test="housesetmainId != null and housesetmainId != ''"> and t.houseSetMain_id = #{housesetmainId} </if>
    		<if test="housesetmainIdVague != null and housesetmainIdVague != ''"> and t.houseSetMain_id like concat('%',#{housesetmainIdVague},'%') </if>
            <if test="warehouseId != null and warehouseId != ''"> and t.warehouse_id = #{warehouseId} </if>
    		<if test="warehouseIdVague != null and warehouseIdVague != ''"> and t.warehouse_id like concat('%',#{warehouseIdVague},'%') </if>
            <if test="totalMoney != null and totalMoney != ''"> and t.total_money = #{totalMoney} </if>
    		<if test="totalMoneyVague != null and totalMoneyVague != ''"> and t.total_money like concat('%',#{totalMoneyVague},'%') </if>
            <if test="paidMoney != null and paidMoney != ''"> and t.paid_money = #{paidMoney} </if>
    		<if test="paidMoneyVague != null and paidMoneyVague != ''"> and t.paid_money like concat('%',#{paidMoneyVague},'%') </if>
            <if test="unpidMoney != null and unpidMoney != ''"> and t.unpid_money = #{unpidMoney} </if>
    		<if test="unpidMoneyVague != null and unpidMoneyVague != ''"> and t.unpid_money like concat('%',#{unpidMoneyVague},'%') </if>
            <if test="settleDate != null and settleDate != ''"> and t.settle_date = #{settleDate} </if>
    		<if test="settleDateVague != null and settleDateVague != ''"> and t.settle_date like concat('%',#{settleDateVague},'%') </if>
            <if test="remark != null and remark != ''"> and t.remark = #{remark} </if>
    		<if test="remarkVague != null and remarkVague != ''"> and t.remark like concat('%',#{remarkVague},'%') </if>
        </where>
    </sql>
	 
	<insert id="save" parameterType="xin.cymall.entity.Warehousesettlemain" useGeneratedKeys="true" keyProperty="housesetmainId">
		insert into t_warehousesettlemain
		(
			`warehouse_id`, 
			`total_money`, 
			`paid_money`, 
			`unpid_money`, 
			`settle_date`, 
			`remark`
		)
		values
		(
			#{warehouseId}, 
			#{totalMoney}, 
			#{paidMoney}, 
			#{unpidMoney}, 
			#{settleDate}, 
			#{remark}
		)
	</insert>
	 
	<update id="update" parameterType="xin.cymall.entity.Warehousesettlemain">
		update t_warehousesettlemain 
		<set>
			<if test="warehouseId != null">`warehouse_id` = #{warehouseId}, </if>
			<if test="totalMoney != null">`total_money` = #{totalMoney}, </if>
			<if test="paidMoney != null">`paid_money` = #{paidMoney}, </if>
			<if test="unpidMoney != null">`unpid_money` = #{unpidMoney}, </if>
			<if test="settleDate != null">`settle_date` = #{settleDate}, </if>
			<if test="remark != null">`remark` = #{remark}</if>
		</set>
		where houseSetMain_id = #{housesetmainId}
	</update>
	
	<delete id="delete">
		delete from t_warehousesettlemain where houseSetMain_id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from t_warehousesettlemain where houseSetMain_id in 
		<foreach item="housesetmainId" collection="array" open="(" separator="," close=")">
			#{housesetmainId}
		</foreach>
	</delete>

</mapper>